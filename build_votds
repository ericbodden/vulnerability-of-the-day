#!/usr/bin/env python

# Copyright 2012 Andrew Meneely and Samuel Lucidi. 
# Licensed under the Educational Community License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at http://www.osedu.org/licenses/ECL-2.0. 
# Unless required by applicable law or agreed to in writing, 
# software distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions 
# and limitations under the License.

import os
import re
import shutil
import argparse
import subprocess
from argparse import RawTextHelpFormatter

# Convert a votd name entered at the command line to something
# that is reasonably safe to be used as a directory name.
def safe_name(votd_name):
	import unicodedata
	if isinstance(votd_name, unicode):
		votd_name = unicodedata.normalize('NFKD', votd_name).encode('ascii', 'ignore')
	votd_name = unicode(re.sub("[^\w\s-]", "", votd_name))
	votd_name.strip()
	votd_name.lower()
	votd_name = unicode(re.sub("[-\s]+", "-", votd_name))
	if len(votd_name) < 1:
		raise ValueError("zero-length votd name")
	return votd_name

# Write out a directory and set of empty
# files for a new vulnerability of the day
def build_skeleton(exploit_name):
	try:
		os.makedirs(os.path.join(exploit_name, "demo"))
	except OSError:
		print "Skipping %s: example already exists" % exploit_name
	subprocess.call(["cp", os.path.join("www-template", "template.html"), os.path.join("%s" % exploit_name, "%s.html" % exploit_name)])
	subprocess.call(["touch", os.path.join("%s" % exploit_name, "notes.markdown")])
	subprocess.call(["touch", os.path.join("%s" % exploit_name, "compatability.markdown")])

# Concatenate html files for selected votds into
# one index.html file.
def build_webpage(votds):
	with open("index.html", 'wb') as destination:
		shutil.copyfileobj(open(os.path.join('www-template', 'prefix.html'), 'rb'), destination)
		for votd in votds:
			try:
				shutil.copyfileobj(open(os.path.join(votd, "%s.html" % votd)), destination)
			except IOError:
				print "Skipping %s: no html file" % votd
		shutil.copyfileobj(open(os.path.join('www-template', 'suffix.html'), 'rb'), destination)

# Zip up the selected votds into one archive suitable
# for downloading.
def build_zip(votds):
	pass


if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Build VotD examples.',
		formatter_class=RawTextHelpFormatter)
	parser.add_argument('command', choices=["new", "www", "zip"], help="""
	new: create skeleton directory for new votds
	www: compile html page for selection of votds
	zip: zip up selection of votds

	""")
	parser.add_argument('votds', metavar='V', type=unicode, nargs='+',
		help="an exploit to build")
	args = parser.parse_args()

	votds = []
	for votd in args.votds:
		votds.append(safe_name(votd))

	if args.command == "new":
		for votd in votds:
			build_skeleton(votd)
	elif args.command == "www":
		build_webpage(votds)
	elif args.command == "zip":
		build_zip(votds)