#!/usr/bin/ruby 

require 'date'

class CachedBalance
  @@EXPIRE_HITS=2 # When do we miss the cache and go in?
  @db             # Actual database of account balances 
  @cache          # Our cache to be poisoned

  def initialize(init_db)
    @db=init_db
    @cache=Hash.new #Empty cache initially
  end

  # VULNERABLE! User can set the cache hit key - don't allow that
  def balance(user, expire_hits=@@EXPIRE_HITS)
    if @cache.key? user
      printf "--CACHE HIT! %s, ", @cache[user]
      hits = @cache[user][:hits]
      hits = hits - 1
      if hits < 0
        puts "EXPIRED CACHE! Hitting db..."
        @cache[user]={ :balance=>@db[user], :hits=>expire_hits }
        #                             BAD!! ^^^^^^^^^^^
      else
        puts "Cached entry not expired, trusting cache"
        @cache[user][:hits]=hits
      end
    else
      puts "--CACHE MISS! Now caching from DB"
      @cache[user]={:balance=>@db[user],:hits=>@@EXPIRE_HITS}
    end

    @cache[user][:balance] # Return what's in the cache
  end

end #class CachedBalance

b = CachedBalance.new({'Jane'=>10, 'Bob'=>5})

puts "\n===Normal Usage==="
printf "Jane's balance is %s\n\n", b.balance('Jane')
printf "Jane's balance is %s\n\n", b.balance('Jane')
printf "Jane's balance is %s\n\n", b.balance('Jane')
printf "Jane's balance is %s\n\n", b.balance('Jane')


puts "\n===Exploit==="
printf "Bob's balance is %s\n\n", b.balance('Bob')
printf "Bob's balance is %s\n\n", b.balance('Bob')
printf "Bob's balance is %s\n\n", b.balance('Bob')
printf "Bob's balance is %s\n\n", b.balance('Bob',999)
printf "Bob's balance is %s\n\n", b.balance('Bob')
printf "Bob's balance is %s\n\n", b.balance('Bob')
printf "Bob's balance is %s\n\n", b.balance('Bob')
printf "Bob's balance is %s\n\n", b.balance('Bob')
